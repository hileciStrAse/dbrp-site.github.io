const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const ActivityService = require('../services/activityService');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('f…ôaliyy…ôt')
        .setDescription('Server f…ôaliyy…ôtl…ôrini idar…ô etm…ôk √º√ß√ºn …ômrl…ôr')
        .addSubcommand(subcommand =>
            subcommand
                .setName('server')
                .setDescription('Server f…ôaliyy…ôtl…ôrini g√∂st…ôrir')
                .addStringOption(option =>
                    option.setName('vaxt')
                        .setDescription('F…ôaliyy…ôtl…ôrin vaxt aralƒ±ƒüƒ±')
                        .setRequired(false)
                        .addChoices(
                            { name: 'Son 1 saat', value: '1h' },
                            { name: 'Son 24 saat', value: '24h' },
                            { name: 'Son 7 g√ºn', value: '7d' },
                            { name: 'Son 30 g√ºn', value: '30d' }
                        )
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('istifad…ô√ßi')
                .setDescription('ƒ∞stifad…ô√ßi f…ôaliyy…ôtl…ôrini g√∂st…ôrir')
                .addUserOption(option =>
                    option.setName('istifad…ô√ßi')
                        .setDescription('F…ôaliyy…ôtl…ôri g√∂r√ºnt√ºl…ôn…ôc…ôk istifad…ô√ßi')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('vaxt')
                        .setDescription('F…ôaliyy…ôtl…ôrin vaxt aralƒ±ƒüƒ±')
                        .setRequired(false)
                        .addChoices(
                            { name: 'Son 1 saat', value: '1h' },
                            { name: 'Son 24 saat', value: '24h' },
                            { name: 'Son 7 g√ºn', value: '7d' },
                            { name: 'Son 30 g√ºn', value: '30d' }
                        )
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('kanal')
                .setDescription('Kanal f…ôaliyy…ôtl…ôrini g√∂st…ôrir')
                .addChannelOption(option =>
                    option.setName('kanal')
                        .setDescription('F…ôaliyy…ôtl…ôri g√∂r√ºnt√ºl…ôn…ôc…ôk kanal')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('statistika')
                .setDescription('Server statistikalarƒ±nƒ± g√∂st…ôrir')
                .addStringOption(option =>
                    option.setName('vaxt')
                        .setDescription('Statistikalarƒ±n vaxt aralƒ±ƒüƒ±')
                        .setRequired(false)
                        .addChoices(
                            { name: 'Son 1 saat', value: '1h' },
                            { name: 'Son 24 saat', value: '24h' },
                            { name: 'Son 7 g√ºn', value: '7d' },
                            { name: 'Son 30 g√ºn', value: '30d' }
                        )
                )
        ),

    async execute(interaction) {
        // Yalnƒ±z admin v…ô ya moderatorlar …ômrl…ôri istifad…ô ed…ô bil…ôr
        if (!interaction.member.permissions.has(PermissionFlagsBits.ManageGuild)) {
            return interaction.reply({
                content: '‚ùå Bu …ômri istifad…ô etm…ôk √º√ß√ºn serveri idar…ô etm…ô icaz…ôniz olmalƒ±dƒ±r.',
                ephemeral: true
            });
        }

        const subcommand = interaction.options.getSubcommand();
        const timeRange = interaction.options.getString('vaxt') || '24h';

        try {
            switch (subcommand) {
                case 'server': {
                    const activities = await ActivityService.getServerActivities(interaction.guild.id, 10);
                    const embed = new EmbedBuilder()
                        .setTitle('üìä Server F…ôaliyy…ôtl…ôri')
                        .setColor('#00c8ff')
                        .setDescription(`Son ${timeRange} …ôrzind…ô server f…ôaliyy…ôtl…ôri:`)
                        .setTimestamp();

                    activities.forEach(activity => {
                        embed.addFields({
                            name: `${activity.username} - ${activity.action}`,
                            value: `${activity.details}\n${new Date(activity.timestamp).toLocaleString('az-AZ')}`,
                            inline: false
                        });
                    });

                    await interaction.reply({ embeds: [embed] });
                    break;
                }

                case 'istifad…ô√ßi': {
                    const user = interaction.options.getUser('istifad…ô√ßi');
                    const activities = await ActivityService.getUserActivities(user.id, interaction.guild.id, 10);
                    const stats = await ActivityService.getUserStats(user.id, interaction.guild.id, timeRange);

                    const embed = new EmbedBuilder()
                        .setTitle(`üë§ ${user.username} - F…ôaliyy…ôtl…ôr`)
                        .setColor('#00c8ff')
                        .setDescription(`Son ${timeRange} …ôrzind…ô f…ôaliyy…ôtl…ôr:`)
                        .setThumbnail(user.displayAvatarURL())
                        .setTimestamp();

                    // Statistikalarƒ± …ôlav…ô et
                    if (stats.length > 0) {
                        const statsText = stats.map(stat => 
                            `${stat.action}: ${stat.count} d…ôf…ô`
                        ).join('\n');
                        embed.addFields({ name: 'üìà Statistikalar', value: statsText, inline: false });
                    }

                    // Son f…ôaliyy…ôtl…ôri …ôlav…ô et
                    activities.forEach(activity => {
                        embed.addFields({
                            name: `${activity.action}`,
                            value: `${activity.details}\n${new Date(activity.timestamp).toLocaleString('az-AZ')}`,
                            inline: false
                        });
                    });

                    await interaction.reply({ embeds: [embed] });
                    break;
                }

                case 'kanal': {
                    const channel = interaction.options.getChannel('kanal');
                    const activities = await ActivityService.getChannelActivities(channel.id, interaction.guild.id, 10);

                    const embed = new EmbedBuilder()
                        .setTitle(`üìù ${channel.name} - Kanal F…ôaliyy…ôtl…ôri`)
                        .setColor('#00c8ff')
                        .setDescription('Son kanal f…ôaliyy…ôtl…ôri:')
                        .setTimestamp();

                    activities.forEach(activity => {
                        embed.addFields({
                            name: `${activity.username} - ${activity.action}`,
                            value: `${activity.details}\n${new Date(activity.timestamp).toLocaleString('az-AZ')}`,
                            inline: false
                        });
                    });

                    await interaction.reply({ embeds: [embed] });
                    break;
                }

                case 'statistika': {
                    const stats = await ActivityService.getServerStats(interaction.guild.id, timeRange);

                    const embed = new EmbedBuilder()
                        .setTitle('üìä Server Statistikalarƒ±')
                        .setColor('#00c8ff')
                        .setDescription(`Son ${timeRange} …ôrzind…ô server statistikalarƒ±:`)
                        .setTimestamp();

                    stats.forEach(stat => {
                        embed.addFields({
                            name: `${stat.action}`,
                            value: `Say: ${stat.count}\nUnikal ƒ∞stifad…ô√ßil…ôr: ${stat.uniqueUsers}`,
                            inline: true
                        });
                    });

                    await interaction.reply({ embeds: [embed] });
                    break;
                }
            }
        } catch (error) {
            console.error('F…ôaliyy…ôt …ômri x…ôtasƒ±:', error);
            await interaction.reply({
                content: '‚ùå F…ôaliyy…ôtl…ôr …ôld…ô edil…ôrk…ôn x…ôta ba≈ü verdi.',
                ephemeral: true
            });
        }
    }
}; 
